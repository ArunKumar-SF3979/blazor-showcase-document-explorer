@page "/pdf-viewer"

@using Syncfusion.Blazor.SfPdfViewer

<div class="zip-container" id="zipContainer">
    <div class="loading_indicator @OverlayStyle">
        <div class="e-de-spinner-pane">
        </div>
        <div class="e-de-loading-text">@DocumentName</div>
        <div class="e-de-spinner-inner">
            <svg class="e-de-spin-bootstrap4" viewBox="0 0 36 36">
                <path class="e-de-path-circle" d="M18,1.8A16.2,16.2 0 1 1 1.8,18"></path>
            </svg>
        </div>
    </div>
    <div class="toolbar">
        <TopToolbar @ref="_topToolbar" BackClick="BackClickHandler"></TopToolbar>
    </div>
    <div class="file-viewer">
        <SfPdfViewer2 @ref="_viewer" ID="PdfView" DocumentPath="@DocumentPath" Height="100%" Width="100%">
            <PdfViewerEvents DocumentLoaded="@OnDocumentLoaded" PageChanged="@OnPageChanged">
            </PdfViewerEvents>
        </SfPdfViewer2>
    </div>
</div>

@code {
    private string OverlayStyle { get; set; } = "overlayShow";
    private string DocumentName { get; set; }
    private string PreviewPath { get; set; }
    private string FileName { get; set; }
    private string SubPath { get; set; }
    private string Path { get; set; }
    private string DocumentPath { get; set; }
    private int PageNumber { get; set; }
    private string ThumbnailStyle { get; set; } = "thumbnailShow";
    private string DeMarginStyle { get; set; } = "e-word-right-layout";
    private int Zoom { get; set; }
    private SfPdfViewer2 _viewer;
    private TopToolbar _topToolbar;

    protected override void OnInitialized()
    {
        if (QueryHelpers.ParseQuery(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query).TryGetValue("path", out var pathparam))
        {
            Path = pathparam.First();
        }
        if (QueryHelpers.ParseQuery(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query).TryGetValue("preview", out var param))
        {
            FileName = param.First();
            DocumentName = "File is loading...";
            PreviewPath = Path + FileName;
        }
        if (QueryHelpers.ParseQuery(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query).TryGetValue("subpath", out var subPathparam))
        {
            SubPath = subPathparam.First();
            DocumentPath = IO.Path.GetTempPath() + "tempZipStorage" + SubPath;
        }
        else
        {
            DocumentPath = "wwwroot/" + PreviewPath;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (SubPath != null)
        {
            _topToolbar.RootName = IO.Path.GetFileName(SubPath);
        }
        else
        {
            _topToolbar.RootName = IO.Path.GetFileName(PreviewPath);
        }
    }

    protected async void OnDocumentLoaded(LoadEventArgs args)
    {
        DocumentName = "";
        OverlayStyle = "overlayHide";
        StateHasChanged();
    }

    private async void BackClickHandler()
    {
        if (_viewer != null)
        {
           await _viewer.UnloadAsync();
        }
        if (SubPath != null)
        {
            string file = IO.Path.GetFileName(PreviewPath);
            Dictionary<string, string> query = new Dictionary<string, string> { { "preview", file }, { "path", PreviewPath.Replace((file), "") } };
            NavigationManager.NavigateTo(QueryHelpers.AddQueryString(NavigationManager.BaseUri + "zip-viewer/", query));
        }
        else
        {
            Dictionary<string, string> query = new Dictionary<string, string> { { "preview", FileName }, { "path", Path } };
            NavigationManager.NavigateTo(QueryHelpers.AddQueryString(NavigationManager.BaseUri, query));
        }
    }

    private async void Goto(int args)
    {
        await _viewer.GoToPageAsync(args);
    }
    private void OnPageChanged(PageChangeEventArgs args)
    {
        StateHasChanged();
    }
}
